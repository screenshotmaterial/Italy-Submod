### Mobilisation Effects
### Written by ~mw~
#
# How to use:
#
#	increase_mobilisation = yes
#

increase_mobilisation = {
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = tot_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = war_economy
		}
	}
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = civilian_economy
		}
		swap_ideas = {
			remove_idea = civilian_economy
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = isolation
		}
		swap_ideas = {
			remove_idea = isolation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = undisturbed_isolation
		}
		swap_ideas = {
			remove_idea = undisturbed_isolation
			add_idea = isolation
		}
	}
}

decrease_mobilisation = {
	if = {
		limit = {
			has_idea = low_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = low_economic_mobilisation
			add_idea = civilian_economy
		}
	}
	if = {
		limit = {
			has_idea = partial_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = partial_economic_mobilisation
			add_idea = low_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = war_economy
		}
		swap_ideas = {
			remove_idea = war_economy
			add_idea = partial_economic_mobilisation
		}
	}
	if = {
		limit = {
			has_idea = tot_economic_mobilisation
		}
		swap_ideas = {
			remove_idea = tot_economic_mobilisation
			add_idea = war_economy
		}
	}
}

disband_units_setup = {
	set_temp_variable = { disband_country = THIS }
	random_state = {
		limit = {
			impassable = yes
			is_fully_controlled_by = owner
		}
		set_temp_variable = { disband_state = THIS }
		set_temp_variable = { disband_state_owner = THIS.owner }
		if = {
			limit = { NOT = { country_exists = XXA } }
			XXA = {
				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
		else = {
			create_dynamic_country = {
				original_tag = XXA

				transfer_state = PREV
				set_temp_variable = { debug_tag_instance = THIS }
				set_temp_variable = { old_manpower = manpower_k }
			}
		}
	}
}

disband_units_transfer_manpower = {
	delete_unit = { disband = yes }

	set_temp_variable = { manpower_diff = manpower_k }
	subtract_from_temp_variable = { manpower_diff = old_manpower }

	while_loop_effect = { #avoid overflows
		limit = { check_variable = { manpower_diff > 1 } }
		subtract_from_temp_variable = { manpower_diff = 1 }
		var:disband_country = { add_manpower = 1000 }
		add_manpower = -1000
	}

	multiply_temp_variable = { manpower_diff = 1000 }
	var:disband_country = { add_manpower = PREV.manpower_diff }

	multiply_temp_variable = { manpower_diff = -1 }
	add_manpower = manpower_diff
}

disband_units_finalise = {
	var:disband_state = { transfer_state_to = var:disband_state_owner }
}

disband_twenty_percent_units = {
	disband_units_setup = yes
	transfer_units_fraction = {
		target = var:debug_tag_instance
		size = 0
		army_ratio = 0.2
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	var:debug_tag_instance = {
		disband_units_transfer_manpower = yes
		send_equipment_fraction = { target = var:disband_country value = 1 }
	}
	disband_units_finalise = yes
}

disband_twenty_percent_units_delete_equipment = { #used for disarming countries in peace events
	disband_units_setup = yes
	transfer_units_fraction = {
		target = var:debug_tag_instance
		size = 0
		army_ratio = 0.2
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	var:debug_tag_instance = {
		disband_units_transfer_manpower = yes
		set_equipment_fraction = 0
	}
	disband_units_finalise = yes
}

disband_fifty_percent_units = {
	disband_units_setup = yes
	transfer_units_fraction = {
		target = var:debug_tag_instance
		size = 0
		army_ratio = 0.5
		keep_unit_leaders_trigger = {
			always = yes
		}
	}
	var:debug_tag_instance = {
		disband_units_transfer_manpower = yes
		send_equipment_fraction = { target = var:disband_country value = 1 }
	}
	disband_units_finalise = yes
}

calculate_maximum_divisions = {
	### calculate base values - population and total factory count
	clear_variable = non_core_base
	clear_variable = base_units
	set_temp_variable = { factory_points = 0 }

	set_variable = { base_states = 0 }
	### normal behaviour - check all owned states of ROOT
	add_to_variable = { base_states = num_owned_states }
	add_to_temp_variable = { factory_points = num_of_owned_factories }
	every_owned_state = {
		if = {
			limit = { is_core_of = ROOT }
			add_to_variable = { ROOT.base_units = state_population_k }
		}
		else = {
			add_to_variable = { ROOT.non_core_base = state_population_k }
		}
	}

	### if in a civil war, count the other sides' states as well
	if = {
		limit = { has_civil_war = yes }
		every_enemy_country = {
			limit = { civilwar_target = ROOT }
			add_to_variable = { ROOT.base_states = num_owned_states }
			add_to_temp_variable = { factory_points = num_of_owned_factories }
			every_owned_state = {
				if = {
					limit = { is_core_of = PREV }
					add_to_variable = { ROOT.base_units = state_population_k }
				}
				else = {
					add_to_variable = { ROOT.non_core_base = state_population_k }
				}
			}
		}
	}

	### if an overlord, check if any puppets should transfer part of their bases
	if = {
		limit = { num_subjects > 0 }
		clear_variable = subject_states
		clear_variable = subject_base_units
		clear_variable = subject_non_core_base
		set_temp_variable = { subject_factory_points = 0 }

		every_subject_country = {
			limit = { check_variable = { modifier@unit_limit_subject_bonus > 0 } }
			add_to_variable = { ROOT.subject_states = num_owned_states }
			add_to_temp_variable = { factory_points = num_of_owned_factories }
			every_owned_state = {
				if = {
					limit = { is_core_of = PREV }
					add_to_variable = { ROOT.subject_base_units = state_population_k }
				}
				else = {
					add_to_variable = { ROOT.subject_non_core_base = state_population_k }
				}
			}
		}
		add_to_variable = { base_states = subject_states }
		add_to_variable = { base_units = subject_base_units }
		divide_variable = { subject_base_units = 1000 } #for the tooltip

		# non-cores only give 2% of the population
		divide_variable = { subject_non_core_base = 50 }
		add_to_variable = { base_units = subject_non_core_base }
		divide_variable = { subject_non_core_base = 1000 } #for the tooltip
	}

	# non-cores only give 2% of the population
	divide_variable = { non_core_base = 50 }
	add_to_variable = { base_units = non_core_base }
	divide_variable = { non_core_base = 1000 } #for the tooltip

	# base unit count = population / 1000
	divide_variable = { base_units = 1000 }
	set_variable = { base_population = base_units } #for the tooltip
	add_to_variable = { base_units = base_states }

	# calculate the modifier -- 1 + [ ( industry - population ) / ( industry + population ) ]
	set_variable = { divisor = factory_points }
	add_to_variable = { divisor = base_units }

	set_variable = { industry_factor = factory_points }
	subtract_from_variable = { industry_factor = base_units }
	divide_variable = { industry_factor = divisor }
	add_to_variable = { industry_factor = 1 }

	# minimum modifier -- x0.5
	set_variable = { industry_factor_uncapped = industry_factor }
	clamp_variable = { var = industry_factor min = 0.5 }

	set_variable = { max_divisions = base_units }
	multiply_variable = { max_divisions = industry_factor }

	# apply multipliers
	set_temp_variable = { limit_multiplier = 1 }
	add_to_temp_variable = { limit_multiplier = modifier@unit_limit_factory_bonus } # +10% per economy law level above civilian economy
	if = {
		limit = { is_faction_leader = yes }
		add_to_temp_variable = { limit_multiplier = 0.15 } # +15% for faction leaders
	}
	multiply_variable = { max_divisions = limit_multiplier }

	# the lower limit is the number of owned states or 5, whichever is higher
	set_variable = { lower_limit = num_owned_states }
	clamp_variable = {
		var = lower_limit
		min = 5
		max = 500
	}

	# apply the lower limit
	set_variable = { net_max_divisions = max_divisions }
	round_variable = net_max_divisions
	clamp_variable = {
		var = max_divisions
		min = lower_limit
		max = 500
	}

	# add any specific bonuses to the limit
	add_to_variable = { max_divisions = modifier@unit_limit_bonus }

	round_variable = max_divisions
}

calculate_mobilisation_penalty = {
	set_variable = { mobilisation_penalty_var = num_actual_divisions }
	divide_variable = { mobilisation_penalty_var = max_divisions }
	subtract_from_variable = { mobilisation_penalty_var = 1 }

	divide_variable = { mobilisation_penalty_var = 4 }
	clamp_variable = {
		var = mobilisation_penalty_var
		min = -0.25
		max = 0.25
	}

	set_variable = { mobilisation_penalty_var_positive = mobilisation_penalty_var }

	#for negative effects
	multiply_variable = { mobilisation_penalty_var = -1 }
}
